@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime js
@inject IAuthService AuthService
@inject IToastService toastService

<EditForm Model="@changePasswordModel" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="newPassword">
            New Password:
        </label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="changePasswordModel.newPassword" />
        <ValidationMessage For="@(() => changePasswordModel.newPassword)" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">
            Confirm Password:
        </label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="changePasswordModel.confirmPassword" />
        <ValidationMessage For="@(() => changePasswordModel.confirmPassword)" />
    </div>
    <div class="text-center">
        <button class="btn btn-primary text-center" type="submit">Change Password</button>
    </div>
</EditForm>

<BlazoredToasts />

@code {
    private ChangePasswordRequestModel changePasswordModel = new ChangePasswordRequestModel();

    [Parameter]
    public string username { get; set; }

    [CascadingParameter] BlazoredModalInstance modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        changePasswordModel.username = username;
    }

    private async Task HandleSubmit()
    {

        var result = await AuthService.ChangePassword(changePasswordModel);

        if (result.status == "Success")
        {
            await modal.CloseAsync(ModalResult.Ok(true));
        }
        else
        {
            toastService.ShowError(result.message);
            changePasswordModel.newPassword = "";
            changePasswordModel.confirmPassword = "";
            this.StateHasChanged();
        }
    }
}
